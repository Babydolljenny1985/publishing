c
content_partner_id
exit
c
ex
n
params
exit
params
n
exit
params
c
e
c
data[:resource_id]
data
@resources[data[:resource_id]]
@resources
@resource
c
uri: data[:object_term][:uri]
uri
n
data[:object_term][:uri]
data[:object_term]
c
@association
c
value
v
c
value
c
exit
data
n
value
n
exit
c
data[:object_page_id]
value
n
data
c
data[:lifestage]
data[:sex]
data[:statistical_method]
c
n
data
c
trait
c
n
predicate
n
ui
n
page_data.source_column.header
page_data
("page_data.source_column_header").html_safe
("page_data.source_column_header").html_saf
index
sections
n
sections
n
c
predicate
exit
n
c
predicate
n
res
n
c
cc
c
n
exit
n
c
@glossary
c
@glossary
c
@glossary
c
@page.glossary[uri]
@page
n
c
n
c
@page.glossary
@page
c
@page.glossary
predicate
n
@page.predicates
index
uri
c
n
@page.predicates
@page.predicate
c
n
@page.data_toc_needs_other?
n
@page.data_toc
@page
c
section.name
n
section.name
link_to(t(:page_data_toc_all_items), "#", data: { section_id: "all" })
link_to(t(:page_data_toc_all_items)
:page_data_toc_all_items
c
@page.data
@resources
c
resources.map { |r| [ r.id, r ] }
resources.map { |r|}.flatten
resources.map { |r| [ r.id, r ] }.flatten
ResourceApi.get_resource_using_id([147])
ResourceApi.get_resource_using_id(147)
ResourceApi.get_resource_using_id(id: "147")
ResourceApi.get_resource_using_id(id: 147)
ResourceApi.get_resource_using_id(id: traits.map { |t| t[:resource_id] }.compact.uniq.first)
resources
n
c
traits.map { |t| t[:resource_id] }.compact.uniq.first
traits.map { |t| t[:resource_id] }.compact.uniq
id: traits.map { |t| t[:resource_id] }.compact.uniq
id
n
c
resources
n
c
resources = Resource.where(id: traits.map { |t| t[:resource_id] }.compact.uniq)
c
traits.map { |t| t[:resource_id] }.compact.uniq
c
options[:section_ids]
n
options[:section_ids]
exit
options[:section_ids]
c
options[:definition]
exit
options
options[:definition]
c
n_unit
n_val
c
n_unit
n_val
c
options[:units]
c
options[:units]
exit
exut
options
units
exit
c
options
c
v
c
ex
Exception
n
c
n
predicate
n
options
trait
c
trait
c
n_unit
n_val
c
trait
c
exit
trait[:measurement]
c
options
c
exit
options
c
options
exit
options
c
exit
predicate
n
c
options
c
options
c
exit
options
c
meta
c
n
options
n
options
c
trait
exit
c
n
exit
c
n
res
n
options
c
exit
term_options.is_a?(Hash)
term_options
c
exit
c
predicate
n
term_options
c
supplier
c
supplier
trait
c
page
c
