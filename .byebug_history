c
display @users
c
display @users
c
display users.results
display users
c
display users
display users.results
c
display users.results
display users
c
display users
c
display users
c
display users
display params
c
display @users.results
display @users
c
display result
display index
display params
c
display json
display @users
c
display @users
display json
c
display result
c
display @users.results
display params[:q]
c
display @users.results
display params[:q]
c
display @users.results
display @users.result
display @users.results
display @users
c
display @users.results
display @users
display users
c
display object
c
display object
c
display search.results
display search
display data
c
display search
c
display data
c
display params[:q]
c
display params
c
display params
c
display params
c
q
rec = [paleo, ex_stat].compact.first
ex_stat
paleo
rec
rec[:object_term]
rec[:object_term] && rec[:object_term][:uri] == Eol::Uris.extinct ? rec : nil
        nil
rec[:object_term] && rec[:object_term][:uri] == Eol::Uris.extinct ? rec :
rec = [paleo, ex_stat].compact
paleo || ex_stat
paleo && ex_stat
ex_stat = recs.find { |r| r[:resource_id] == Resource.extinction_status.id }
paleo = recs.find { |r| r[:resource_id] == Resource.paleo_db.id }
recs = our_page.grouped_traits[Eol::Uris.extinction]
recs = page.grouped_traits[Eol::Uris.extinction]
our_page.displayed_extinction_trait
puts our_page.traits
q
puts model.name
puts model
c
puts model.name
q
p var.name
p var == :@@logger
var == :@@logger
p var
var
exit
p var
var
q
model.name =~ /^Refin/
model.name
model == Refinery::Core::BaseModel
model
quit
paleo
ex_stat = recs.find { |r| r[:resource_id] == Resource.extinction_status.id }
paleo = recs.find { |r| r[:resource_id] == Resource.paleo_db.id }
res.id
recs.find { |r| r[:resource_id] == res.id }[:resource_id]
Resource.where(name: "The Paleobiology Database").count
res
res.id
rec.id
Resource.paleo_db.id
ex_stat = recs.find { |r| r[:resource_id] == Resource.extinction_status.id }
paleo = recs.find { |r| r[:resource_id] == Resource.paleo_db.id }
recs.find { |r| r[:resource_id] == res.id }
res = Resource.where(name: "The Paleobiology Database").first
recs.first
r.id
r
recs.find { |r| r[:resource_id] == r.id }
r = Resource.where(name: "The Paleobiology Database").first
recs
$FOO
ex_stat
paleo
q
c
ex_stat
paleo
n
q
puts summary
q
exit
our_page.name
our_page.vernaculars
our_page.name
lang_name.string
lang
lang_name.string
our_page.name
c
lang_name.string
our_page.name
language ||= Language.find_by_group(I18n.locale)
language
lang
Language.find(59)
our_page.vernaculars
quit
Vernacular.last
node.vernaculars
node
q
our_page.name("zz")
our_page.name
lang_name.string
lang_name.name
our_page.vernacular(l).string
our_page.vernacular(l)
our_page.vernacular
l = Language.find_by_group("zz")
our_page.name("zz")
our_page.name
lang_name
our_page.vernaculars
Language.find_by_group("zz")
q
puts t_data["object_page"]
quit
puts id
puts @page.id
puts @page
c
display user
c
display user
c
display user
c
display response
c
display response
p response
c
skip
display response.body >> result
display response.body > result
display response.body
display response
c
~c
c
res
traits
c
ancestor_page_ids
ancestor_page_ids.each
c
ancestor_page_ids
c
clade_id
ancestors
c
params
param
c
quit
puts data.first
puts data.size
puts data.class
puts data["id"]
puts data
puts datas
c
rendered
c
 expect(rendered).to have_selector("div[class='*collection_search']")
rendered
c
c 
c
collection
c
cc
c
skip
c
p @collection
p @collection.class
p @collection.collected_pages
p @collection.class
p @collection.collected_pages
p @collection.collcted_pages
p @collection.colelcted_pages
p @collection.collections
p @collection
c
p @collection.id
p @collection.attributes
c
p @collection.attributes
p @collection
p @collection.id
p @collection
p collection
p controller
p @collection
c
