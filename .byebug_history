c
body
continue
c
exit
res.destroy_all
res.first.destroy
ex
n
rn
res.count
res = Reference.where(referent_id: params[:referent_id])
c
exit
ex
n
referent_id
c
n
referent_id
c
referent_id
c
n
referent.id
n
c
n
exit
c
n
c
referent_id
n
exit
c
cc
c
Reference.where(referent_id: params[:referent_id])
c
params[:resource_id]
resource_id
referents
n
params[:body]
c
params[:body]
c
referent_id
n
c
params[:body]
params
c
n
reference
c
reference
c
params[:reference]
params[:references]
params
c
Vernacular.where(node_id: node_id)
node_id
c
medium.id
medium
c
medium
c
medium
c
medium.count
medium
c
n
c
medium["deltaStatus"]
medium
n
c
n
c
options
c
options
c
options
c
params[:scientific_name]
params
c
params[:scientific_name]
params
c
skip
TraitBank.by_trait(2).first
TraitBank.by_trait(1).first
TraitBank.by_trait(1)
params[:id]
c
TraitBank.by_trait(params[:id])
c
params
c
@data
c
trait
c
trait
c
datum_path
'show-path'
trait[:id]
:data
c
trait
c
trait.first
trait
c
trait
c
trait
c
n
hashes.last
hashes.first
hashes
n
m
c
res
res.first
res.length
c
n
@page
n
@resources
n
@resources
n
res
c
@resources
n
c
resources
Hash[ *resources.map { |r| [ r['id'], r ] }.flatten ]
resources
c
TraitBank.resources(@page.data)
@page.data
@resources
n
c
@resources
n
c
n
@resources
n
c
id.gsub("'", "''")
input
c
@data
n
c
n
res
n
id
n
c
ResourceApi.get_resource_using_id(147)
traits
t[:resource_id]
traits.map { |t| t[:resource_id] }
traits.map { |t| t[:resource_id] }.compact.uniq
traits.map { |t| t[:resource_id] }.compact.uniq.first
ResourceApi.get_resource_using_id(traits.map { |t| t[:resource_id] }.compact.uniq.first)
c
@page.media
@page.medium
@page
c
@page.medium
c
show_taxon
page
c
content_partner_id
content_partner_api
c
trait
c
nnnnnnn
nnnnn
n
c
n
e
n
e
n
c
n
c
n
c
n
e
n
c
params
c
params[:resource_id]
c
params["resource_id"]
c
params[:resource_id]
params[:resource_id
c
n
c
ex
rx
n
c
params
c
result
c
n
supplier
n
page
n
resource_id
n
c
@page.referents
@page
c
ref.body.html_safe?
c
ref.body
c
ref.body
c
@page.referents_count
c
@page
