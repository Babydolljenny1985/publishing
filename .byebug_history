exit
puts e.backtrace[0..3]
puts e
quit
puts e.backtrace
puts e
quit
pages[7662]
page[7662]
pages.keys.first
page
puts e.class
puts e.backtrace[7..15]
puts e.backtrace[0..6]
puts e
quit
reload!
reload
puts e.backtrace[0..3]
puts e
continue
extxt
g
gf
xt
exit
q
puts e
quit
puts e
quit
puts e
quit
puts e
q
puts e
quit
puts e
put e
puts e.backtrace[0..4]
puts e.backtrace.first
puts e.backtrace[0..200]
puts e.backtrace[0..1000]
puts e
exit
c
reload!
c
ex
puts e.backtrace
puts e
quit
q
puts e
q
puts e
quit
Rails.env.test?
Rails.test?
Rails.env
request.url
request.uri
request
link_to("foo", "bar")
original_url
current_url
current_page
current_path
q
pp e
puts e
puts e.message
q
traits.map { |a| a[:measurement] }
traits.map { |t| t[:literal] }
traits.map { |t| get_name(t) }
traits.sort { |a,b| sort(a) }
traits.sort { |a,b| a.size <=> b.size }
sort_by_predicates(traits.first, traits.last)
options
traits.map { |t| t.nil? }
exit
traits
exit
page.richness_score
page = Page.find 1149380
[].blank?
nil.empty?
[].empty?
[].emopty?
nil.blank?
@results.results.first
@results.total
@results.results.size
@results.rows
@results = CollectedPage.find_pages("birch", 658)
reload!
c.collection_type
c.gallery?
c.normal?
c = Collection.find 658
quit
page.glossary.first
page.traits
page.taits
page.duplicate_articles
a.sections << Section.first
page.duplicate_sections
page.sections
a.sections
a.reload
a.pages.map &:id
a.pages
a.sections << Section.last
a.reload!
a = Article.find 53
a.save
u.update_attribute(:admin, true)
u = User.first
page.articles.sort_by { |a| a.sections.sort_by { |s| s.position }.first.position }
page.toc
page = Page.where(id: 1149380).preloaded.first
  end
    end
      s_name = hash[:name]
      s.parent_id = hash[:parent_id]
      s.id = hash[:id]
    Section.where(hash).first_or_create do |s|
  ].each do |hash|
    { id: 347, parent_id: 303, name: "taxonomy", position: 324 }
    { id: 336, parent_id: 0, name: "notes", position: 292 },
    { id: 333, parent_id: 326, name: "molecular_biology", position: 263 },
    { id: 329, parent_id: 326, name: "genetics", position: 259 },
    { id: 326, parent_id: 0, name: "molecular_biology_and_genetics", position: 258 },
    { id: 321, parent_id: 315, name: "growth", position: 240 },
    { id: 320, parent_id: 315, name: "reproduction", position: 239 },
    { id: 317, parent_id: 315, name: "cyclicity", position: 236 },
    { id: 315, parent_id: 0, name: "life_history_and_behavior", position: 234 },
    { id: 313, parent_id: 4, name: "diseases_and_parasites", position: 209 },
    { id: 309, parent_id: 1, name: "distribution", position: 4 },
    { id: 308, parent_id: 1, name: "comprehensive_description", position: 3 },
    { id: 303, parent_id: 0, name: "names_and_taxonomy", position: 320 },
    { id: 300, parent_id: 0, name: "wikipedia", position: 291 },
    { id: 296, parent_id: 8, name: "management", position: 269 },
    { id: 293, parent_id: 3, name: "diagnostic_description", position: 8 },
    { id: 286, parent_id: 8, name: "conservation_status", position: 265 },
    { id: 285, parent_id: 4, name: "associations", position: 208 },
    { id: 267, parent_id: 3, name: "morphology", position: 6 },
    { id: 251, parent_id: 6, name: "benefits", position: 271 },
    { id: 242, parent_id: 4, name: "general_ecology", position: 211 },
    { id: 218, parent_id: 4, name: "dispersal", position: 206 },
    { id: 41, parent_id: 4, name: "habitat", position: 204 },
    { id: 8, parent_id: 0, name: "conservation", position: 264 },
    { id: 6, parent_id: 0, name: "relevance_to_humans_and_ecosystems", position: 270 },
    { id: 4, parent_id: 0, name: "ecology", position: 203 },
    { id: 3, parent_id: 0, name: "physical_description", position: 5 },
    { id: 2, parent_id: 1, name: "brief_summary", position: 2 },
    { id: 1, parent_id: 0, name: "overview", position: 1 },
  [
Section.delete_all
Section.all.map(&:id)
    # end
      puts "  #{s_name}: \"#{hash[:name]}\""
      s_name = hash[:name].gsub(/\s+/, "_").underscore
    #   s.parent_id = hash[:parent_id]
    #   s.id = hash[:id]
    # Section.where(hash).first_or_create do |s|
  {id: 347, parent_id: 303, name: "Taxonomy"}].each do |hash|
  {id: 336, parent_id: 0, name: "Notes"},
  {id: 333, parent_id: 326, name: "Molecular Biology"},
  {id: 329, parent_id: 326, name: "Genetics"},
  {id: 326, parent_id: 0, name: "Molecular Biology and Genetics"},
  {id: 321, parent_id: 315, name: "Growth"},
  {id: 320, parent_id: 315, name: "Reproduction"},
  {id: 317, parent_id: 315, name: "Cyclicity"},
  {id: 315, parent_id: 0, name: "Life History and Behavior"},
  {id: 313, parent_id: 4, name: "Diseases and Parasites"},
  {id: 309, parent_id: 1, name: "Distribution"},
  {id: 308, parent_id: 1, name: "Comprehensive Description"},
  {id: 303, parent_id: 0, name: "Names and Taxonomy"},
  {id: 300, parent_id: 0, name: "Wikipedia"},
  {id: 296, parent_id: 8, name: "Management"},
  {id: 293, parent_id: 3, name: "Diagnostic Description"},
irb
traits.sort do |a,b|
traits.sort do |a,b| ; a.size <=> b.size ; end 
traits.sort { |a,b| a.size <=> b.size }
traits.sort
pp traits ; 1
pp traits
q
puts b
puts a
q
c
n
puts traits
c
q
c
q
@current
l ||= Language.english
l = Language.find_by_group(locale)
Language.find_by_group(locale)
Rails.cache.read("languages/current/#{locale}")
locale
c
q
rec = [paleo, ex_stat].compact.first
ex_stat
paleo
rec
rec[:object_term]
rec[:object_term] && rec[:object_term][:uri] == Eol::Uris.extinct ? rec : nil
        nil
rec[:object_term] && rec[:object_term][:uri] == Eol::Uris.extinct ? rec :
rec = [paleo, ex_stat].compact
paleo || ex_stat
paleo && ex_stat
ex_stat = recs.find { |r| r[:resource_id] == Resource.extinction_status.id }
paleo = recs.find { |r| r[:resource_id] == Resource.paleo_db.id }
recs = our_page.grouped_traits[Eol::Uris.extinction]
recs = page.grouped_traits[Eol::Uris.extinction]
our_page.displayed_extinction_trait
puts our_page.traits
q
puts model.name
puts model
c
puts model.name
q
p var.name
p var == :@@logger
var == :@@logger
p var
var
exit
p var
var
q
model.name =~ /^Refin/
model.name
model == Refinery::Core::BaseModel
model
quit
paleo
ex_stat = recs.find { |r| r[:resource_id] == Resource.extinction_status.id }
paleo = recs.find { |r| r[:resource_id] == Resource.paleo_db.id }
res.id
recs.find { |r| r[:resource_id] == res.id }[:resource_id]
Resource.where(name: "The Paleobiology Database").count
res
res.id
rec.id
Resource.paleo_db.id
