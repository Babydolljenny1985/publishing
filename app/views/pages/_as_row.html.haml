- c_page ||= defined?(collected_page) ? collected_page.page : nil
- page = PageDecorator.decorate(c_page)
- icon ||= page.icon
- common ||= search_highlight(page, :preferred_vernacular_strings, :name)
- scientific ||= search_highlight(page, :scientific_name, :scientific_name)
- show_actions = defined?(collected_page) ? policy(collected_page.collection).update? : nil
- has_query = defined?(@q) && ! @q.blank?
- media = (defined?(media) && media && ! media.empty?) ? media.compact.delete_if { |m| m.medium_icon_url == icon }.uniq : []
- id = defined?(collected_page) ? collected_page.id : page.id
%li.uk-card.uk-card-hover.eol-bright.uk-box-shadow-small{ id: "page_row_#{id}" }
  .uk-card-body.uk-grid-small{ uk: { grid: true } }
    - if icon
      .eol-width-medium-icon
        %a{ href: page_path(page) }
          = image_tag(icon, class: "ui small image fluid")
    .uk-width-expand
      .page-ancestors
        %ul.uk-breadcrumb.eol-padding-tiny
          - ancestors = page.native_node.try(:ancestors)
          - if ancestors
            - shown_ellipsis = false
            - ancestors.compact.each do |node|
              - unless node.has_breadcrumb?
                - unless shown_ellipsis
                  &nbsp;â€¦
                  - shown_ellipsis = true
                - next
              %li= link_to(node.canonical_form.html_safe, node.page_id ? page_path(node.page_id) : "#")
              - shown_ellipsis = false
          - else
            = t("pages.native_node_missing_warning")
      - if is_admin?
        .uk-float-right.uk-text-muted.eol-text-tiny
          - if page.page_richness.nil?
            -# NOTE: yes, I want this hard-coded, not translated. It's a DB value.
            nil
          - else
            = page.page_richness / 100.0
      - if show_actions
        .uk-float-right.uk-margin
          = link_to(t("collected_pages.delete_button"), collected_page, method: "delete", data: { confirm: t("collected_pages.delete_confirm") }, class: "ui basic tiny button")
          = link_to(t("collected_pages.edit_button"), edit_collected_page_path(collected_page), remote: true, class: "ui basic tiny button")
      .names.d-inline
        -# Because these can be JSON results, we can't link to the model
        -# directly: (e.g. link_to(:foo, page) <-- won't work)
        - page_link = page_path(page.id)
        - if common.blank?
          .uk-text-large= link_to(scientific.html_safe, page_link, class: "primary-name")
        - else
          .uk-text-large
            = link_to(common.titleize.html_safe, page_link, class: "primary-name")
          .uk-text-muted= link_to(scientific.html_safe, page_link, class: "secondary-name")
      - if defined?(annotation)
        .uk-margin-small-top
          = annotation
      - if has_query
        .matches.uk-margin-small-top
          - others = search_highlight(page, :vernacular_strings)
          - unless others.blank?
            %b= t("search_results.field_matches.vernaculars", count: 1)
            = others

          - others = search_highlight(page, :synonyms)
          - unless others.blank?
            %b= t("search_results.field_matches.synonyms", count: 1)
            = others

          - others = search_highlight(page, :providers)
          - unless others.blank?
            %b= t("search_results.field_matches.resources", count: 1)
            = others

          - others = search_highlight(page, :resource_pks)
          - unless others.blank?
            %b= t("search_results.field_matches.resource_pk", count: 1)
            = others

      - else # (no query string)
        - summary = page&.cached_summary
        - unless summary.sentence.blank?
          .uk-margin-small-top= summary.sentence.html_safe
          - summary.terms.each do |term|
            = render "terms/desc_meta", term: term.obj, pred_uri: term.pred_uri, source: term.source, toggle: term.toggle_selector, search_link: true
      - unless media.empty?
        .uk-card.uk-card-default.eol-section-aged.uk-padding-small.uk-margin-small-left.uk-margin-small-top
          %h5.uk-text-center= t("search_results.collected_media.title")
          .uk-grid.uk-child-width-expand{ uk: { grid: true } }
            - media.uniq.each do |medium|
              .child
                = link_to(image_tag(medium.small_icon_url, class: "img-responsive", size: "88x88"), medium)
