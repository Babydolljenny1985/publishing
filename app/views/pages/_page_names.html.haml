-# NOTE: preventing defaults in this view makes is rather complicated, but is
-# not all that computationally expensive and is worth the effort. TODO: it
-# would be better to clean this up with helpers, and make it clear again.

.desc
  %h2= t(:scientific_names_header)
  %div.uk-grid-small{ uk: { grid: true }, class: 'uk-child-width-expand@s uk-child-width-1-3@m' }
    - @page.sci_names_by_status.each do |status, scientific_names|
      %div
        .uk-card.uk-card-default
          .uk-card-header
            %h3.uk-card-title= status
          .uk-card-body
            .ui-list
              - accepted = t('scientific_name.status_title.accepted')
              - names_by_res = scientific_names.group_by { |n| n.resource.dwh? ? :dwh : :other }
              = render "resource_names", status: status, scientific_names: names_by_res[:dwh], accepted: accepted
              = render "resource_names", status: status, scientific_names: names_by_res[:other], accepted: accepted
  %h2= t(:vernacular_names_header)
  .uk-grid-small{ uk: { grid: true }, class: 'uk-child-width-1-3@m' }
    - if @page.vernaculars.empty?
      %div
        .uk-card.uk-card-default
          .uk-card-body= t(:page_vernaculars_empty)
    - else
      - all_names = @page.vernaculars.group_by { |n| n.language.group }
      - all_names.keys.sort_by { |l| language_header(l) }.each do |lang|
        - names_by_lang = all_names[lang]
        %div
          .uk-card.uk-card-default
            .uk-card-header
              %h3.uk-card-title= language_header(lang)
            .uk-card-body
              .ui-list
                - names_by_lang.group_by { |n| n.string }.each do |string, names_by_string|
                  .item
                    - preferred_name = names_by_string.any? { |n| n.is_preferred? }
                    .header
                      = string.html_safe
                      - if preferred_name
                        %span.uk-label.uk-label-primary.uk-float-right.uk-margin-left= t(:name_preferred_label)
                      - elsif is_admin?
                        -# TODO: admin OR curator...
                        .uk-float-right
                          = link_to(t("names.prefer"), prefer_vernacular_path(names_by_string.first))
                    .description.uk-text-meta
                      - formatted_names = []
                      - names_by_string.select { |n| n.node }.group_by { |n| n.node.resource }.each do |resource, names_by_resource|
                        - str = resource.name
                        - if names_by_resource.any? { |n| n.is_preferred_by_resource and not preferred_name }
                          - str = t(:vernacular_preferred_by_resource, resource: str)
                        - formatted_names << link_to(str, resource)
                      = t(:name_recognized_by, by: formatted_names.to_sentence).html_safe
  = render('pages/page_classification')
