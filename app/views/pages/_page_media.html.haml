- filters = defined?(filterable) ? filterable : true
#gallery.ui.section
  - if filters
    -#
      .uk-text-center{ class: "uk-hidden@m" }
        %ul.uk-subnav.uk-subnav-pill
          %li
            = link_to(t(:filter_by_medium_any_item),
              page_media_path(page_id: @page.id, subclass: nil, license: @license, resource_id: @resource_id),
              remote: true, class: "item#{ @subclass.nil? ? " uk-active" : ""}")
          - Medium.subclasses.each do |sc_name, sc_id|
            - next if sc_name == "js_map"
            %li= link_to(t("medium.subclasses.#{sc_name}"), page_media_path(page_id: @page.id, license: @license, subclass: sc_id, resource_id: @resource_id),
              remote: true, class: "item#{ sc_id == @subclass ? " uk-active" : ""}")

    -#
      .ui.menu.uk-text-small{ class: "uk-visible@m js-media-menus" }
    .ui.menu.uk-text-small{ class: "js-media-menus" }
      .ui.dropdown.item
        - if @license
          %b= @license
        - else
          = t(:filter_by_license)
        %i.dropdown.icon
        .menu
          = link_to(t(:filter_by_license_any_item),
            page_media_path(page_id: @page.id, license: nil, subclass: @subclass, resource_id: @resource_id),
            remote: true, data: { type: 'html' }, class: "item#{ @license.nil? ? " active" : ""}")
          -#
            - License.types.each do |lic|
          - @licenses.each do |lic|
            = link_to(lic, page_media_path(page_id: @page.id, license: lic, subclass: @subclass, resource_id: @resource_id),
              remote: true, data: { type: 'html' }, class: "item#{ lic == @license ? " active" : ""}")
      -# .ui.dropdown.item
      -#   - if @subclass
      -#     %b= t("medium.subclasses.#{@subclass}")
      -#   - else
      -#     = t(:filter_by_medium_subtype)
      -#   %i.dropdown.icon
      -#   .menu
      -#     = link_to(t(:filter_by_medium_any_item),
      -#       page_media_path(page_id: @page.id, subclass: nil, license: @license, resource_id: @resource_id),
      -#       remote: true, data: { type: 'html' }, class: "item#{ @subclass.nil? ? " active" : ""}")
      -#     -#
      -#       - Medium.subclasses.each do |sc_name, sc_id|
      -#     - @subclasses.each do |sc|
      -#       = link_to(t("medium.subclasses.#{sc}"), page_media_path(page_id: @page.id, license: @license, subclass: sc, resource_id: @resource_id),
      -#         remote: true, data: { type: 'html' }, class: "item#{ sc == @subclass ? " active" : ""}")
      .ui.dropdown.item
        - if @resource
          %b= @resource.name
        - else
          = t(:filter_by_resource)
        %i.dropdown.icon
        .menu.uk-height-medium.uk-overflow-auto
          = link_to(t(:filter_by_resource_any_item),
            page_media_path(page_id: @page.id, subclass: @subclass, license: @license, resource_id: nil),
            remote: true, data: { type: 'html' }, class: "item#{ @subclass.nil? ? " active" : ""}")
          -# TODO: Cache or use autocomplete or ... something. :S
          - @resources.each do |resource|
            = link_to(resource.name, page_media_path(page_id: @page.id, license: @license, subclass: @subclass, resource_id: resource.id),
              remote: true, data: { type: 'html' }, class: "item#{ resource.id == @resource_id ? " active" : ""}")
  - total_pages = (@page.media_count.to_f / @media_page_size).ceil
  %div{ class: "uk-visible@m" }
    -# TODO: #paginate *forces* a count, and we don't want that here. Alas...
    = paginate @media, total_pages: total_pages
  -# If you want the list to be sortable:
  -# %ul.uk-child-width-1-6.uk-grid-small{ uk: { grid: true, sortable: "handle: .uk-sortable-handle" } }
  = render("media/grid", media: @media)
  -# TODO: remote isn't working. I don't have time to figure out why, right now.
  -# = paginate @media, remote: true, total_pages: total_pages
  = paginate @media, total_pages: total_pages
