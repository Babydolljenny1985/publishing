!!!
%html
  %head
    %meta{content: "text/html; charset=UTF-8", "http-equiv": "Content-Type"}/
    %meta{name: "viewport", content: "width=device-width, initial-scale=1"}/
    %title
      - if defined?(@page_title)
        = @page_title
        \-
      = t(:page_title)
    = stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': true
    = stylesheet_link_tag 'http://ajax.googleapis.com/ajax/libs/angular_material/1.1.0-rc2/angular-material.min.css'
    = javascript_include_tag 'application', 'data-turbolinks-track': true
    = javascript_include_tag "http://ajax.googleapis.com/ajax/libs/angularjs/1.5.3/angular-animate.min.js"
    = javascript_include_tag "http://ajax.googleapis.com/ajax/libs/angularjs/1.5.3/angular-aria.min.js"
    = javascript_include_tag "http://ajax.googleapis.com/ajax/libs/angular_material/1.1.0-rc2/angular-material.min.js"
    = csrf_meta_tags
    = yield :head
  %body
    .ui.following.bar.fixed.menu
      .ui.container
        #navbar.ui.large.secondary.network.menu
          -# TODO: I18n
          = link_to("EOL", "/", class: "item")
          = link_to("About", "/about", class: "item")
          = link_to("Education", "http://education.eol.org/", class: "item")
          = link_to("Donate", "/donate", class: "item")
          .ui.simple.dropdown.item
            %i.us.flag
            = link_to(("English" + "<span class='caret'></span>").html_safe, "/donate", class: "dropdown-toggle", data: { toggle: "dropdown" }, role: "button", aria: { haspopup: "true", expanded: "false" })
            = semantic_icon(:dropdown)
            .menu
              .item
                %i.fr.flag
                = link_to("French", "#")
              .item
                %i.de.flag
                = link_to("German", "#")
              .item
                %i.ru.flag
                = link_to("Russian", "#")
              .item
                %i.es.flag
                = link_to("Spanish", "#")
          .right.menu
            .nav-search.item
              %script{ type: "text/ng-template", id: "layoutSearchTemplate.html" }
                .autocomplete-result.row
                  .icon.col-md-2
                    %a{ href: "#" }
                      %img{ "ng-src" => "{{ match.model.top_image.small_icon_url }}" }
                  .names.col-md-10
                    %a{ href: "#" }
                      %ul
                        %li{ "ng-repeat" => "vern in match.model.names",
                          "ng-bind-html" => "vern.string + ' (' + vern.language.code + ') ' | typeaheadHighlight:query" }
              %div{ "ng-controller" => "SearchCtrl as ctrl", "layout" => "column" }
                = form_tag(search_path, method: "get", autocomplete: "off") do
                  .ui.icon.input
                    = text_field_tag("q", nil,
                      "ng-model" => "selectedPage",
                      "placeholder" => t(:layout_search_placeholder),
                      "typeahead" => "page for page in querySearch($viewValue)",
                      "typeahead-template-url" => "layoutSearchTemplate.html",
                      "typeahead-min-length" => 3,
                      "typeahead-loading" => "loadingLocations",
                      "typeahead-on-select" => "onSelect($item, $model, $label)",
                      "typeahead-input-formatter" => "nameOfModel($model)",
                      "class" => "form-control",
                      "autocomplete" => "off")
                    = semantic_icon "search link"
            .search-indicator.nav.navbar-nav.navbar-right
              %i{ "ng-show" => "loadingLocations", "class" => "glyphicon glyphicon-refresh" }
            - if current_user
              .item= link_to(current_user.username, user_path(current_user))
              .item= link_to(t(:layout_sign_out), destroy_user_session_path)
            - else
              .item= link_to(t(:layout_sign_in), new_user_session_path)
              .item= link_to(t(:layout_sign_up), new_user_registration_path)

    #main.ui.padded.container
      .ui.vertical.stripe
        - unless flash.empty?
          - flash.each do |name, msg|
            .alert.alert-danger.alert-dismissible.fade.in{ role: "alert" }
              %button.close{ type: "button", data: { dismiss: "alert" }, aria: { label: "Close" } }
                %span{ aria: { hidden: "true" } }
                  &times;
              - next if name ==  :recaptcha_error.to_s
              - if msg.class == Array
                - msg.each do |message|
                  = content_tag :p, message.html_safe, :id => "flash_#{name}"
              - else
                = content_tag :p, msg.html_safe, :id => "flash_#{name}"
        = content_for?(:content) ? yield(:content) : yield
      .ui.vertical.stripe
        -# TODO: figure out why the padding that should be here ... isn't.
        \&nbsp;
    -# TODO: a real footer...
    .ui.inverted.vertical.footer.segment
      .ui.container
        .ui.stackable.inverted.divided.equal.height.stackable.grid
          .three.wide.column
            %h4.ui.inverted.header= "About"

            .ui.inverted.link.list
              = link_to("Stuff", "#", class: "item")
              = link_to("More stuff", "#", class: "item")
              = link_to("Things", "#", class: "item")
              = link_to("Content", "#", class: "item")
          .three.wide.column
            %h4.ui.inverted.header= "Explore"

            .ui.inverted.link.list
              = link_to("Stuff", "#", class: "item")
              = link_to("More stuff", "#", class: "item")
              = link_to("Things", "#", class: "item")
              = link_to("Content", "#", class: "item")
          .seven.wide.column
            %h4.ui.inverted.header= "Some Cool Footer Stuff"
            %p= "Something interesting and engaging would go here and you would enjoy reading it, having been called to immediate action thusly."
