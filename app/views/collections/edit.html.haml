-# This is a hidden form that helps with user management:
= form_tag(collection_add_user_path(@collection), method: "post", remote: true, class: "find_users_form") do
  = hidden_field_tag("user_id", "0")
-# This is the main form:
= form_for(@collection) do |f|
  .uk-section.uk-grid{ uk: { grid: true } }
    .uk-width-3-4
      .field
        = label_tag(:name)
        = f.text_field :name
      .field
        = label_tag(:description)
        %br/
        = f.text_area(:description, cols: "80", rows: "6")
      = collection_radio_buttons(:collection, :collection_type, Collection.collection_types, :first, :first)
    - if policy(@collection).update?
      .uk-width-1-4.actions
        = f.submit(class: "ui button")
        %br/
        = link_to t(:cancel), collection_path(@collection), class: "ui basic button"

  .uk-section
    %h3.uk-title= t("collection.admins.header")
    %ul.uk-list.collection_users
      - @collection.users.each do |user|
        %li{ id: "user_#{user.id}" }
          = link_to(user.username, user)
          - unless user == current_user
            = remove_collection_user_link(@collection, user)
    .find_users.uk-margin-top
      - hide_params_in_form(["user_id"])
      %div
        = t("collection.admins.label")
      %div
        = text_field_tag("user", nil,
          placeholder: t("collection.admins.placeholder"),
          remote: true, class: "uk-input uk-form-width-medium typeahead")

  - if @pages.empty?
    %p= t(:collection_pages_empty)
  - else
    %h2= t(:collected_pages_title)
    %table.collections
      %tbody
        - @pages.each do |collected_page|
          - page = collected_page.page
          %tr
            %th.collection-table-image{ scope: "row" }
              = link_to(image_tag(collected_page.icon), page)
            %th{ scope: "row" }
              .names.d-inline
                - common = collected_page.name.titleize.html_safe
                - scientific = collected_page.scientific_name_string.html_safe
                - if common.blank?
                  = link_to(scientific, page, class: "primary-name")
                - else
                  = link_to(common, page, class: "primary-name")
                  %br/
                  = link_to(scientific, page, class: "secondary-name")
                %br/
                = f.fields_for(:collected_pages, collected_page) do |cp_f|
                  .d-inline
                    = label_tag(:annotation, nil, class: "clearfix")
                    %br/
                    = cp_f.text_area(:annotation, cols: "80", rows: "6")
                  - unless collected_page.media.empty?
                    = t(:collection_collected_pages_media_remove)
                    %br/
                    %row.icons_12_wide.d-inline
                      - collected_page.collected_pages_media.each do |cpm|
                        - next unless cpm.medium
                        .col-md-1
                          = cp_f.fields_for(:collected_pages_media, cpm) do |cpm_f|
                            = cpm_f.hidden_field(:medium_id, id: cpm.medium_id)
                            = cpm_f.hidden_field(:collected_page_id, id: cpm.collected_page_id)
                            = cpm_f.check_box :_destroy
                            = image_tag(cpm.medium.small_icon_url, class: "img-responsive", size: "88x88")
  - unless @collection.collection_associations.empty?
    /# TODO
    Ooops, collections-in-collections are not implemented
  %p.col-md-3.actions.col-md-offset-2
    = f.submit(class: "ui button")
  %p.col-md-3.actions
    = link_to t(:cancel), collection_path(@collection), class: "ui basic button"
