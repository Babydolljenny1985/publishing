#term_form_container
  = form_for @query, :url => term_search_results_path, :method => :get, :html => { :id => "new_term_query", :class => ["uk-form", "uk-form-horizontal", "js-filter-form", ("is-multiple-filters" if (@query.filters.length > 1))], :data => { :submit_notification => t(".this_may_take_a_minute") }, :autocomplete => "off" } do |f|
    - if @query.errors[:base].any?
      %ul.base-errors
        - @query.errors.full_messages_for(:base).each do |e|
          %li= e

    .filter.filter-row
      %span.js-typeahead-wrap.l-filter-full
        = text_field_tag "clade_name", f.object.clade&.native_node&.canonical_form, :class => "js-clade-typeahead uk-input", :placeholder => t(".clade_filter_placeholder")
        = f.hidden_field :clade_id, :class => "js-typeahead-field"

    = f.fields_for :filters do |ff|
      .filter.uk-form-row
        - if f.object.filters.length > 1
          .l-filter-first.filter-icon
            .js-remove-filter{:'uk-icon' => "icon: close; ratio: 1.4", :data => { :index => ff.index }}
        = render "filter_field", field_name: "pred", typeahead_class: "pred", placeholder: t(".attribute_eg"), ff: ff, label_uri: ff.object.top_pred_uri.present? ? ff.object.top_pred_uri : ff.object.pred_uri, nested_selects: true
        - if ff.object.units_for_pred?
          .filter-row{:class => (ff.object.errors[:num_val1].any? || ff.object.errors[:num_val2].any?) ? "is-filter-row-with-errors" : ""}
            %span.filter-field
              = ff.text_field :num_val1, :class => "filter-input uk-input uk-form-width-small", :placeholder => "-∞"
              - show_error(ff.object, :num_val1)
            %span.filter-txt to
            %span.filter-field
              = ff.text_field :num_val2, :class => "filter-input uk-input uk-form-width-small", :placeholder => "∞"
              - show_error(ff.object, :num_val2)
          .filter-row{:class => ff.object.errors[:obj_uri].any? ? "is-filter-row-with-errors" : ""}
            = ff.select :units_uri, units_select_options(ff.object), {}, :class => "filter-input uk-select l-filter-full"
        - elsif ff.object.association_pred?
          %span.js-typeahead-wrap.filter-field
            = text_field_tag "obj_clade_name", ff.object.obj_clade&.native_node&.canonical_form, :class => "js-clade-typeahead uk-input", :placeholder => t(".target_group")
            = ff.hidden_field :obj_clade_id, :class => "js-typeahead-field"
        - else
          - typeahead_class = ff.object.predicate? ? "pred-obj" : "obj"
          = render "filter_field", field_name: "obj", typeahead_class: typeahead_class, placeholder: t(".value_eg"), typeahead_data: { :'pred-uri' => ff.object.pred_uri }, ff: ff

        - if ff.object.show_extra_fields?
          = render "filter_field", field_name: "sex", typeahead_class: "meta-obj", typeahead_data: { pred: "sex" }, placeholder: t(".sex"), ff: ff
          = render "filter_field", field_name: "lifestage", typeahead_class: "meta-obj", typeahead_data: { pred: "lifestage" }, placeholder: t(".lifestage"), ff: ff
          = render "filter_field", field_name: "statistical_method", typeahead_class: "meta-obj", typeahead_data: { pred: "stat_meth" }, placeholder: t(".statistical_method"), ff: ff
          .filter-row{:class => ff.object.errors[:resource].any? ? "is-filter-row-with-errors" : ""}
            %span.js-typeahead-wrap.filter-field.l-filter-full
              = text_field_tag "resource_name", ff.object.resource&.name, :class => "js-resource-typeahead uk-input", :placeholder => t(".resource")
              = ff.hidden_field :resource_id, :class => "js-typeahead-field"
              - show_error(ff.object, :resource)
          .filter-row
            .a.js-hide-meta-filters{ data: { index: ff.index } }= t(".hide_additional_fields")
        - else
          .filter-row
            .a.js-show-meta-filters{ data: { index: ff.index } }= t(".show_additional_fields")
        = ff.hidden_field :show_extra_fields

    .filter-row
      .filter.add-filter.js-add-filter
        %span.filter-icon{:'uk-icon' => "icon: plus; ratio: 1.4"}
        .filter-txt= t(".trait_filter")
    .filter-row.filter-row-flex
      .filter-radios.js-search-type
        .filter-field.filter-field-radio
          = label_tag :search_type_page, t(".taxa_matching_all")
          = f.radio_button :result_type, :taxa
        .filter-field.filter-field-radio
          = label_tag :search_type_record, t(".records_matching_all")
          = f.radio_button :result_type, :record
    = submit_tag t(".search"), :class => "submit uk-button uk-button-primary uk-button-large uk-width-1-1 js-term-search-submit", :disabled => !f.object.valid_ignoring_blank_filters?
